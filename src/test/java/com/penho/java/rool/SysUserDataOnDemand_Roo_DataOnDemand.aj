// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.penho.java.rool;

import com.penho.java.rool.SysUser;
import java.lang.Boolean;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect SysUserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SysUserDataOnDemand: @Component;
    
    private Random SysUserDataOnDemand.rnd = new SecureRandom();
    
    private List<SysUser> SysUserDataOnDemand.data;
    
    public SysUser SysUserDataOnDemand.getNewTransientSysUser(int index) {
        SysUser obj = new SysUser();
        setEnabled(obj, index);
        setLastLogin(obj, index);
        setPassword(obj, index);
        setUserName(obj, index);
        return obj;
    }
    
    public void SysUserDataOnDemand.setEnabled(SysUser obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void SysUserDataOnDemand.setLastLogin(SysUser obj, int index) {
        Date lastLogin = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastLogin(lastLogin);
    }
    
    public void SysUserDataOnDemand.setPassword(SysUser obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void SysUserDataOnDemand.setUserName(SysUser obj, int index) {
        String userName = "userName_" + index;
        obj.setUserName(userName);
    }
    
    public SysUser SysUserDataOnDemand.getSpecificSysUser(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        SysUser obj = data.get(index);
        return SysUser.findSysUser(obj.getId());
    }
    
    public SysUser SysUserDataOnDemand.getRandomSysUser() {
        init();
        SysUser obj = data.get(rnd.nextInt(data.size()));
        return SysUser.findSysUser(obj.getId());
    }
    
    public boolean SysUserDataOnDemand.modifySysUser(SysUser obj) {
        return false;
    }
    
    public void SysUserDataOnDemand.init() {
        data = SysUser.findSysUserEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'SysUser' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.penho.java.rool.SysUser>();
        for (int i = 0; i < 10; i++) {
            SysUser obj = getNewTransientSysUser(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
